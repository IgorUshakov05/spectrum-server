const { Markup } = require("telegraf");
const { delete_user_by_id } = require("../../../../database/Request/User");
const {
  get_chat_id_director,
} = require("../../../../database/Request/Director");
module.exports = async function removeUser(ctx) {
  try {
    const callbackData = ctx.callbackQuery.data;

    if (ctx.from.username !== process.env.DIRECTOR) {
      await ctx.reply(
        "üö´ *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω*\n\n–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
        { parse_mode: "Markdown" }
      );
      return;
    }

    const user_id = await callbackData.split("_").reverse()[1];
    const message_id = await callbackData.split("_").reverse()[0];
    let chat_id_director = await get_chat_id_director();
    if (!user_id) {
      await ctx.reply(
        "‚ö†Ô∏è *–û—à–∏–±–∫–∞ ID*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
        { parse_mode: "Markdown" }
      );
      throw new Error("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ID –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
    }
    const result = await delete_user_by_id(user_id);

    if (result.success) {
      await ctx.answerCbQuery("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω", { show_alert: false });

      await ctx.telegram.editMessageText(
        chat_id_director.chat_id,
        parseInt(message_id),
        null,
        "‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω*\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É:",
        {
          parse_mode: "Markdown",
          reply_markup: Markup.keyboard([
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"],
            ["‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"],
          ])
            .resize()
            .oneTime(),
        }
      );
    } else {
      console.log(result);
      await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${result.message}`, {
        show_alert: true,
      });
    }
  } catch (e) {
    const errorMessage = e.message.replace(/[_*[\]()~`>#+=|{}.!-]/g, "\\$&");
    await ctx.reply(
      `‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n\`\`\`js\n${errorMessage}\n\`\`\``,
      { parse_mode: "MarkdownV2" }
    );
    console.error(e);
  }
};
