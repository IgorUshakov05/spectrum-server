const { Markup } = require("telegraf");
const { set_chat_id } = require("../../database/Request/Director");
const { find_user } = require("../../database/Request/User");
module.exports = (bot) => {
  bot.start(async (ctx) => {
    try {
      const userId = ctx.from.username;
      let userInDB = await find_user(ctx.chat.id);
      if (userInDB.user?.role === "admin") {
        return await ctx.reply(
          `–ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?`,
          Markup.keyboard([["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å"], ["‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å"]])
            .resize()
            .oneTime(),
          { parse_mode: "Markdown" }
        );
      }
      console.log(userInDB);
      const payload = ctx?.startPayload;
      console.log(payload);
      if (userId === process.env.DIRECTOR) {
        await set_chat_id(ctx.chat.id);
        return await ctx.reply(
          "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:",
          Markup.keyboard([
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"],
            ["‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"],
          ])
            .resize()
            .oneTime()
        );
      }
      if (payload) {
        const decoded = Buffer.from(payload, "base64").toString("utf8");
        const params = new URLSearchParams(decoded);
        const code = params.get("code");
        const role = params.get("role");

        ctx.session.step = "waiting_fullname";
        ctx.session.code = code;
        ctx.session.role = role;
        return ctx.reply(
          "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
          { parse_mode: "Markdown" }
        );
      }
    } catch (e) {
      const errorMessage = e.message.replace(/[_*[\]()~`>#+=|{}.!-]/g, "\\$&");
      await ctx.reply(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É:\n\`\`\`js\n${errorMessage}\n\`\`\``, {
        parse_mode: "MarkdownV2",
      });
    }
  });
};
