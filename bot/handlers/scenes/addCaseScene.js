const { Scenes, Markup } = require("telegraf");
const { create_case } = require("../../../database/Request/Case");
const { is_admin } = require("../../../database/Request/User");
const { downloadFile } = require("./download");

const cancelKeyboard = Markup.keyboard([["‚ùå –û—Ç–º–µ–Ω–∞"]])
  .resize()
  .oneTime();

const addCaseWizard = new Scenes.WizardScene(
  "add-case-wizard",

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∏ –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ
  async (ctx) => {
    let chatId = ctx.from.id;
    let isAdmin = await is_admin(chatId);
    if (!isAdmin.success) {
      ctx.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!");
      return ctx.scene.leave();
    }

    await ctx.reply("üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–µ–π—Å–∞:", cancelKeyboard);
    return ctx.wizard.next();
  },

  // 2. –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏ —Å–∫–∞—á–∞—Ç—å
  async (ctx) => {
    if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
      await ctx.reply(
        "‚ùóÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        Markup.keyboard([["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å"], ["‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å"]])
          .resize()
          .oneTime()
      );
      return ctx.scene.leave();
    }

    const photo = ctx.message?.photo?.pop();
    if (!photo) {
      await ctx.reply(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞."
      );
      return;
    }

    ctx.wizard.state.photo = photo.file_id;
    try {
      const filePath = await downloadFile(photo.file_id, ctx.telegram);
      console.log(filePath);
      ctx.wizard.state.photo = filePath;
    } catch (err) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.");
      return ctx.scene.leave();
    }

    await ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–µ–π—Å–∞:", cancelKeyboard);
    return ctx.wizard.next();
  },

  // 3. –ó–∞–≥–æ–ª–æ–≤–æ–∫
  async (ctx) => {
    if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
      await ctx.reply(
        "‚ùóÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        Markup.keyboard([["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å"], ["‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å"]])
          .resize()
          .oneTime()
      );
      return ctx.scene.leave();
    }
    if (!ctx.message || typeof ctx.message.text !== "string") {
      await ctx.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞.");
      return;
    }
    ctx.wizard.state.title = ctx.message.text;
    await ctx.reply("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–µ–π—Å–∞:", cancelKeyboard);
    return ctx.wizard.next();
  },

  // 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  async (ctx) => {
    if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
      await ctx.reply(
        "‚ùóÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        Markup.keyboard([["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å"], ["‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å"]])
          .resize()
          .oneTime()
      );
      return ctx.scene.leave();
    }
    if (!ctx.message || typeof ctx.message.text !== "string") {
      await ctx.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–µ–π—Å–∞.");
      return;
    }
    ctx.wizard.state.description = ctx.message.text;

    const save = await create_case(ctx.wizard.state);
    console.log("‚úÖ –ö–µ–π—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", save);

    await ctx.reply(
      "‚úÖ –ö–µ–π—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
      Markup.keyboard([["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å"], ["‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å"]])
        .resize()
        .oneTime()
    );
    return ctx.scene.leave();
  }
);

module.exports = addCaseWizard;
